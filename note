# -*- coding: utf-8 -*-

import os
import flask
import requests
import google.oauth2.credentials
import google_auth_oauthlib.flow
import googleapiclient.discovery

# This variable specifies the name of a file that contains the OAuth 2.0
# information for this application, including its client_id and client_secret.
CLIENT_SECRETS_FILE = "secret/client.json"

# This OAuth 2.0 access scope allows for full read/write access to the
# authenticated user's account and requires requests to use an SSL connection.
SCOPES = ['https://www.googleapis.com/auth/youtube', 'https://www.googleapis.com/auth/youtube.force-ssl']

API_SERVICE_NAME = 'youtube'
API_VERSION = 'v3'

app = flask.Flask(__name__)
app.secret_key = 'REPLACE ME - this value is here as a placeholder.'

@app.route('/')
def index():
    return print_index_table()

@app.route('/create_live_stream', methods=['GET', 'POST'])
def create_live_stream():
    if 'credentials' not in flask.session:
        return flask.redirect('authorize')

    if flask.request.method == 'POST':
        # Load credentials from the session.
        credentials = google.oauth2.credentials.Credentials(
            **flask.session['credentials'])

        youtube = googleapiclient.discovery.build(
            API_SERVICE_NAME, API_VERSION, credentials=credentials)

        # Prepare request for creating a live stream
        '''
        You must specify a value for these properties:

        snippet.title
        cdn.frameRate
        cdn.ingestionType
        cdn.resolution
        You can set values for these properties:

        snippet.title
        snippet.description
        cdn.frameRate
        cdn.ingestionType
        cdn.resolution
        contentDetails.isReusable
        '''
        live_stream = {
            'snippet': {
                'title': flask.request.form['title'],
                'description': flask.request.form['description']
            },
            'cdn': {
                'frameRate': '30fps',
                'ingestionType': 'rtmp',
                'resolution': '1080p'
            },
            'status': {
                'privacyStatus': 'private'
            }
        }

        # Create the live stream
        request = youtube.liveStreams().insert(
            part="snippet,cdn, status",
            body=live_stream
        )
        response = request.execute()

        # Save credentials back to session
        flask.session['credentials'] = credentials_to_dict(credentials)

        return flask.jsonify(response)

    return '''
        <form method="POST">
            <label for="title">Stream Title:</label><br>
            <input type="text" id="title" name="title" required><br>
            <label for="description">Stream Description:</label><br>
            <textarea id="description" name="description" required></textarea><br>
            <label for="scheduled_start_time">Scheduled Start Time:</label><br>
            <input type="datetime-local" id="scheduled_start_time" name="scheduled_start_time" required><br><br>
            <input type="submit" value="Create Live Stream">
        </form>
    '''

@app.route('/test_api_request')
def test_api_request():
    if 'credentials' not in flask.session:
        return flask.redirect('authorize')

    credentials = google.oauth2.credentials.Credentials(
        **flask.session['credentials'])

    youtube = googleapiclient.discovery.build(
        API_SERVICE_NAME, API_VERSION, credentials=credentials)

    # Get the list of live broadcasts
    request = youtube.liveBroadcasts().list(
        part="snippet,status",
        mine=True
    )
    response = request.execute()

    # Save credentials back to session
    flask.session['credentials'] = credentials_to_dict(credentials)

    return flask.jsonify(**response)

@app.route('/authorize')
def authorize():
    flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(
        CLIENT_SECRETS_FILE, scopes=SCOPES)

    flow.redirect_uri = flask.url_for('oauth2callback', _external=True)

    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true')

    flask.session['state'] = state

    return flask.redirect(authorization_url)

@app.route('/oauth2callback')
def oauth2callback():
    state = flask.session['state']

    flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(
        CLIENT_SECRETS_FILE, scopes=SCOPES, state=state)
    flow.redirect_uri = flask.url_for('oauth2callback', _external=True)

    authorization_response = flask.request.url
    flow.fetch_token(authorization_response=authorization_response)

    credentials = flow.credentials
    flask.session['credentials'] = credentials_to_dict(credentials)

    return flask.redirect(flask.url_for('create_live_stream'))

@app.route('/revoke')
def revoke():
    if 'credentials' not in flask.session:
        return ('You need to <a href="/authorize">authorize</a> before ' +
                'testing the code to revoke credentials.')

    credentials = google.oauth2.credentials.Credentials(
        **flask.session['credentials'])

    revoke = requests.post('https://oauth2.googleapis.com/revoke',
                            params={'token': credentials.token},
                            headers={'content-type': 'application/x-www-form-urlencoded'})

    status_code = getattr(revoke, 'status_code')
    if status_code == 200:
        return ('Credentials successfully revoked.' + print_index_table())
    else:
        return ('An error occurred.' + print_index_table())

@app.route('/clear')
def clear_credentials():
    if 'credentials' in flask.session:
        del flask.session['credentials']
    return ('Credentials have been cleared.<br><br>' +
            print_index_table())

def credentials_to_dict(credentials):
    return {'token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'token_uri': credentials.token_uri,
            'client_id': credentials.client_id,
            'client_secret': credentials.client_secret,
            'scopes': credentials.scopes}

def print_index_table():
    return ('<table>' +
            '<tr><td><a href="/create_live_stream">Create Live Stream</a></td>' +
            '<td>Submit a live stream request.</td></tr>' +
            '<tr><td><a href="/test_api_request">Test an API request</a></td>' +
            '<td>Submit an API request to list live broadcasts.</td></tr>' +
            '<tr><td><a href="/authorize">Test the auth flow directly</a></td>' +
            '<td>Go directly to the authorization flow.</td></tr>' +
            '<tr><td><a href="/revoke">Revoke current credentials</a></td>' +
            '<td>Revoke the access token associated with the current user session.</td></tr>' +
            '<tr><td><a href="/clear">Clear Flask session credentials</a></td>' +
            '<td>Clear the access token currently stored in the user session.</td></tr></table>')

if __name__ == '__main__':
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
    app.run('localhost', 8080, debug=True)
